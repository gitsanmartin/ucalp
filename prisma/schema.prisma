// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
	previewFeatures = ["referentialIntegrity"]
}

datasource db {
	provider = "mysql"
	url	= env("DATABASE_URL")
}

model Classroom {
	@@map(name: "classroom")
	id				Int 		@default(autoincrement()) @id 
	classroomNumber	Int? 		@unique
	createdAt 		DateTime 	@default(now())
	upgrateAt 		DateTime 	@updatedAt
	capacity 		Int
	subjects 		Subject[]
	description		ClassroomAndDescription[]
}

model Description {
	@@map(name: "description")
	id				Int			@default(autoincrement()) @id
	detail			String		@db.VarChar(50)
	classroom		ClassroomAndDescription[]
}

model ClassroomAndDescription {
	@@map(name: "classroom_description")
	classroomId		Int
	descriptionId	Int
	classroom		Classroom	@relation(fields: [classroomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	description		Description	@relation(fields: [descriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	@@id([classroomId, descriptionId])
}

model Subject {
	@@map(name:"subject")
	id 				Int 		@default(autoincrement()) @id 
	nameSubject		String 		@db.VarChar(50)
	duration		String 		@db.VarChar(20)
	year			Int
	students		Int?		@default(0)
	createdAt 		DateTime 	@default(now())
	upgrateAt 		DateTime 	@updatedAt
	classroom_id 	Int?
	classroom 		Classroom? 	@relation(fields: [classroom_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
	professors 		SubjectAndProfessor[]
	careers 		SubjectAndCareer[]
	schedule		SubjectAndSchedule[]
}

model Professor {
	@@map(name: "professor")
	id 				Int 		@default(autoincrement()) @id 
	firstName		String 		@db.VarChar(50) @default("")
	lastName		String 		@db.VarChar(50) @default("")
	createdAt 		DateTime 	@default(now())
	upgrateAt 		DateTime 	@updatedAt
	subjects 		SubjectAndProfessor[]
}

model SubjectAndProfessor {
	@@map(name: "subject_professor")
	subject 		Subject 	@relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	subjectId 		Int
	professorId 	Int
	professor 		Professor 	@relation(fields: [professorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	createdAt 		DateTime 	@default(now())
	upgrateAt 		DateTime 	@updatedAt
	@@id([subjectId, professorId])
}

model Career {
	@@map(name: "career")
	id 				Int 		@default(autoincrement()) @id
	nameCareer		String 		@db.VarChar(50)
	createdAt 		DateTime 	@default(now())
	upgrateAt 		DateTime 	@updatedAt
	subjects 		SubjectAndCareer[]
}

model SubjectAndCareer {
	@@map(name: "subject_career")
	subjectId 		Int
	subject 		Subject 	@relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	careerId 		Int
	career 			Career 		@relation(fields: [careerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	@@id([subjectId, careerId])
}

model Schedule {
	@@map(name: "schedule")
	id				Int			@id @default(autoincrement())
	startTime		Int
	endTime			Int
	day				Day
	createdAt 		DateTime 	@default(now())
	upgrateAt 		DateTime 	@updatedAt
	subjects		SubjectAndSchedule[]
	@@unique(fields: [startTime, endTime, day], name: "simpleSchedule")
}

model SubjectAndSchedule {
	@@map(name: "subject_schedule")
	subjectId		Int
	scheduleId		Int
	subject 		Subject 	@relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	schedule		Schedule	@relation(fields: [scheduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	@@id([subjectId, scheduleId])
}

enum Day {
	MONDAY
	TUESDAY
	WEDNESDAY
	THURSDAY
	FRIDAY
	SATURDAY
	SUNDAY
}